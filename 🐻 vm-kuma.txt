===========================================================================================================
=============[ K  U  M  A ]================================================================================

# update software repositories
sudo apt update

# install available software updates
sudo apt upgrade -y

# install prerequisites
sudo apt install git curl -y

# add nodejs software repository
curl -sL https://deb.nodesource.com/setup_current.x | sudo bash -

# install nodejs
sudo apt install nodejs -y

# clone from git
git clone https://github.com/louislam/uptime-kuma.git ./uptime-kuma

# change directory to ./uptime-kuma
cd uptime-kuma

# run setup
npm run setup

# run uptime kuma
node server/server.js

# pruebo que puedo entrar en la web
http://<IP-SERVER>:3001

# create nodejs user
sudo useradd nodejs

# change directory out of uptime-kuma
cd ..

# move uptime kuma to /opt
sudo mv ./uptime-kuma /opt

# create service bash file
sudo nano /opt/uptime-kuma/uptime-kuma.sh
---------------------------------------------------------------------
#!/usr/bin/bash
/usr/bin/node /opt/uptime-kuma/server/server.js
---------------------------------------------------------------------

# make uptime-kuma.sh executable
sudo chmod +x /opt/uptime-kuma/uptime-kuma.sh

# create uptime-kuma service file
sudo nano /etc/systemd/system/uptime-kuma.service
---------------------------------------------------------------------
[Unit]
Description=uptime-kuma

[Service]
ExecStart=/opt/uptime-kuma/uptime-kuma.sh
Restart=always
User=nodejs
Group=nodejs
WorkingDirectory=/opt/uptime-kuma

[Install]
WantedBy=multi-user.target
---------------------------------------------------------------------

# set owner of /opt/uptime-kuma
sudo chown nodejs:nodejs /opt/uptime-kuma -R

# reload systemd services
sudo systemctl daemon-reload

# start uptime-kuma service on boot and now
sudo systemctl enable uptime-kuma --now

# 丘멆잺 la primera vez que entro en la web tengo que crear la cuenta si no lo recuerdo puedo lanzar el siguiente comando
# cd /opt/uptime-kuma
# node server/server.js reset-password

# Configuraci칩n en el entorno web
Ajustes > Notificaciones > Configuraci칩n notificaci칩n
---------------------------------------------------------------------
Tipo de notificaci칩n: Email (SMTP)
Nombre sencillo: Gmail Alert
Nombre del host: smtp.gmail.com
Puerto: 465
Seguridad: TLS (465)
Usuario: <correo-gmail>
Contrase침a: <contrase침a-de-aplicacion-de-gmail>
Asunto Personalizado: 游댒游닆 Alerta de monitor | PROXMOX  췅 root酩쎝MyKuma] 
[x] Habilitado por defecto
[x] Aplicar en todos los monitores existentes
---------------------------------------------------------------------

# creo un nuevo panel
A침adir nuevo panel
---------------------------------------------------------------------
Tipo de monitor: Ping
Nombre sencillo: <nombre>
Nombre del host: <ip-del-servidor-a-monitorizar>
---------------------------------------------------------------------

# Finalmente en GMAIL creo una etiqueta con el nombre "游댒游닆 PROXMOX" y una regla que todos que tengan el asunto "游댒游닆 Alerta de monitor", para que los envie a la etiqueta para poder borrarlos de forma masiva
 

=========================================================================================================
# 游빑 aviso del servidor por CPU [monitorizaci칩n - sobrecalentamiento mini-pc-servidor]:

# instalando paquetes
sudo apt update
sudo apt install postfix sensors -y

# compruebo estado
systemctl status postfix

# copio la version antigua del archivo
cp /etc/postfix/main.cf /etc/postfix/main.cf.old
vim /etc/postfix/main.cf
---------------------------------------------------------------------
relayhost = [smtp.gmail.com]:587
smtp_use_tls = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
smtp_address_preference = ipv4
---------------------------------------------------------------------

# agrego credenciales
vim /etc/postfix/sasl_passwd
---------------------------------------------------------------------
[smtp.gmail.com]:587 correo@gmail.com:tu_contrase침a_o_clave_de_aplicaci칩n
---------------------------------------------------------------------

# doy permisos 
chmod 600 /etc/postfix/sasl_passwd

# compatibilidad de postfix por una versi칩n reciente y estable
postconf compatibility_level=3.6

# recargo servicio
sudo postfix reload

# enviar correo
echo "Correo de prueba enviado desde Postfix usando Gmail" | mail -s "Prueba Exitosa" destinatario@gmail.com

# comprobar que se a enviado
mailq                                       # Ver cola
tail -f /var/log/mail.log                   # Ver env칤os en tiempo real y comprobar fallos

# desarrollo el script para avisar si la CPU sobrepasa los 80췈 (con el comando sensors)
vim /usr/local/bin/check_temp_cpu.sh
------------------------------------------------------------------------------------------------------
#!/bin/bash
GMAIL_TO="correo@gmail.com"
TEMP_LIMIT=80.0                             # temperatura l칤mite realista
LOG_FILE="/var/log/check_temp.log"

# Leer temperatura
temp=$(sensors | awk '/Package id 0/ {gsub(/\+|춿C/, "", $4); print $4; exit}')
[[ -z "$temp" ]] && temp=$(sensors | awk '/Core 0/ {gsub(/\+|춿C/, "", $3); print $3; exit}')

if [[ -z "$temp" ]]; then
    echo "[$(date)] No se pudo leer la temperatura." >> "$LOG_FILE"
    exit 1
fi

if (( $(echo "$temp > $TEMP_LIMIT" | bc -l) )); then
    echo "[$(date)] Temperatura alta: $temp춿C." >> "$LOG_FILE"
    echo -e "丘멆잺 ALERTA:\n\nLa CPU de $(hostname) ha alcanzado los $temp춿C.\n\n칔ltimas 20 l칤neas del log:\n$(tail -n 20 "$LOG_FILE")" | mail -s "游댒丘멆잺 Alerta CPU - $temp춿C" "$GMAIL_TO"
fi
--------------------------------------------------------------------------------------------------------

# con cron en vez como servicio constante con systemctl
crontab -e
--------------------------------------------------------------------------------------------------------
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
*/20 * * * * /usr/local/bin/check_temp_cpu.sh
--------------------------------------------------------------------------------------------------------

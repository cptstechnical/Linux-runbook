#=========================================================================================================================
[üë∫ce-500]::
# Guia de oficial instalaci√≥n LXC      : https://linuxcontainers.org/#navigation
# Guia no oficial                      : https://www.josedomingo.org/pledin/2021/12/introduccion-lxc/

#=========================================================================================================================
[üë∫RESUMEN PROYECTO ¬∑ M√ÅQUINAS LABORATOR√çO]:
# üßë‚Äçüéì Dentro de un servidor Debian, voy a crear unas m√°quinas virtuales con LXC (Linux Containers). Ya que lo que quiero es crear m√°quinas independientes con distintos servicios.
# üßë‚Äçüéì Voy a crear un script para hacer m√°s sencillo la utilizaci√≥n e instalaci√≥n de LXC
#      Configuraci√≥n de los contenedores LXC      :: cat /etc/lxc/default.conf
#      Sistema de archivos del contenedor         :: cd /var/lib/lxc/<NOMBRE_CONTENEDOR>/rootfs/
#      Listar todas las plantillas                :: ls /usr/share/lxc/templates/
#      Configuraci√≥n de red del contenedor        :: cat /var/lib/lxc/<NOMBRE_CONTENEDOR>/config


#=========================================================================================================================
[üë∫MANUAL DE FUNCIONAMIENTO LXC]:
# üßë‚Äçüéì Este paso lo dejo para conocer los comandos que voy hacer por debajo pero lo quiero qutomatizar con el script del siguiente apartado
# üì¶ Instalaci√≥n en Debian
sudo apt update
sudo apt install lxc lxc-templates bridge-utils

# üß± Crear un contenedor Debian
sudo lxc-create -n vm-samba -t debian

# üîå Iniciar el contenedor (segundo plano) : esto es para que aunque salga con "exit" seguir√° encendido
sudo lxc-start -n vm-samba -d

# üèóÔ∏è Comprobar que est√° en ejecuci√≥n
sudo lxc-info -n vm-samba
# ü´∏ Detener el contenedor
sudo lxc-stop -n vm-samba
# üìÑ Listar 
lxc-ls --fancy

# üì≤ Acceder al contenedor
sudo lxc-attach -n vm-samba


#=========================================================================================================================
[üë∫INSTALACI√ìN]:
sudo apt update
sudo apt install lxc

# üßë‚Äçüéì creo el script como comando global para ejecutar/crear/borrar las m√°quinas de manera directa
# üì¶ su nombre "kiribako", es una palabra japonesa que significa "guardar algo de valor dentro de una caja"
# el script estaba en la ruta /ce-500/KIRIBAKO.sh
# agrego el script de KIRIBAKO como:: 
echo $PATH
    > ../usr/bin/..
cd /usr/bin/

# agrego el script, con el nombre sin extension
vim kiribako
----------------------------------------------------------------------------
#!/bin/bash
# Funci√≥n para mostrar el men√∫
mostrar_menu() {
    # Mostrar estado actual de los contenedores
    echo "Estado actual de los contenedores:"
    lxc-ls --fancy
    echo ""

RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${RED} ____  __..__         .__ ___.             __      "
echo -e "|    |/ _||__|_______ |__|\\_ |__  _____   |  | __  ____"
echo -e "|      /  |  |\\_  __ \\|  | | __ \\ \\__  \\  |  |/ / /  _ \\ "
echo -e "|    |  \\ |  | |  | \\/|  | | \\_\\ \\ / __ \\_|    < (  <_> )"
echo -e "|____|__ \\|__| |__|   |__| |___  /(____  /|__|_ \\ \\____/ "
echo -e "        \\/                     \\/      \\/      \\/        ${NC}"

    # Mostrar men√∫ de opciones
    echo "¬øQu√© deseas hacer?"
    echo "1) Crear una nueva m√°quina"
    echo "2) Iniciar una m√°quina en segundo plano"
    echo "3) Acceder a una m√°quina"
    echo "4) Parar una m√°quina"
    echo "5) Eliminar una m√°quina"
    echo "6) Salir"
    read -p "Elige una opci√≥n [1-6]: " opcion

    case $opcion in
        1)
            # Selecci√≥n del tipo de sistema operativo
            echo "¬øQu√© sistema operativo deseas para la m√°quina?"
            echo "1) Debian"
            echo "2) Ubuntu"
            echo "3) Kali"
            read -p "Elige una opci√≥n [1-3]: " so

            case $so in
                1)
                    tipo_so="debian"
                    ;;
                2)
                    tipo_so="ubuntu"
                    ;;
                3)
                    tipo_so="kali"
                    ;;
                *)
                    echo "Opci√≥n no v√°lida. Se usar√° Debian por defecto."
                    tipo_so="debian"
                    ;;
            esac

            # Nombre de la nueva m√°quina
            read -p "Introduce el nombre de la nueva m√°quina: " nombre
            sudo lxc-create -n "$nombre" -t "$tipo_so"
            ;;
        2)
            read -p "Introduce el nombre de la m√°quina a iniciar: " nombre
            sudo lxc-start -n "$nombre" -d
            ;;
        3)
            read -p "Introduce el nombre de la m√°quina a la que quieres acceder: " nombre
            sudo lxc-attach -n "$nombre"
            ;;
        4)
            read -p "Introduce el nombre de la m√°quina que deseas parar: " nombre
            sudo lxc-stop -n "$nombre"
            ;;
        5)
            read -p "Introduce el nombre de la m√°quina que deseas eliminar: " nombre
            sudo lxc-destroy -n "$nombre"
            ;;
        6)
            echo "Saliendo del script..."
            exit 0
            ;;
        *)
            echo "Opci√≥n no v√°lida."
            ;;
    esac
}

# Bucle que muestra el men√∫ hasta que el usuario decida salir
while true; do
    mostrar_menu
done
----------------------------------------------------------------------------

chmod +x KIRIBAKO.sh

# compruebo que puedo acceder al comando de manera global
command -v kiribako

#=========================================================================================================================
[üõ∞Ô∏èce-500]::
# üìÑüö´ He decidido utilizar LXC en vez de Docker por que crea contenedores de S.O persistentes y es justo lo que quiero y en el caso de Docker son para aplicaci√≥n, (a√∫n creando volumenes no es lo mismo...)

#=========================================================================================================================
[üõ∞Ô∏èBRIDGE DE RED LOCAL]::
#üßë‚Äçüéì Por defecto LXC utiliza un bridge de lxcbr0 (que es NAT por defecto), pero voy a utilizar un bridge real (modo puente): br0 que use la red 192.168.1.x. (la misma que mi red local).
vim /etc/network/interfaces
--------------------------------------------------------------------------------------------------------------------------
# Configuraci√≥n de la interfaz WiFi
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# La interfaz Ethernet (configuraci√≥n est√°tica)
auto eno1
iface eno1 inet manual

 # Bridge que usar√° la IP del host
 auto br0
 iface br0 inet static
     address 192.168.1.57
     netmask 255.255.255.0
     gateway 192.168.1.1
     bridge_ports eno1
     bridge_stp off
        bridge_fd 0
        bridge_maxwait 0
dns-nameservers 8.8.8.8 1.1.1.1

# The primary network interface
#allow-hotplug wlp3s0
#iface wlp3s0 inet dhcp
#   wpa-ssid <SSID_WIFI>
#   wpa-psk  <PASSWORD_WIFI>
--------------------------------------------------------------------------------------------------------------------------

# modifico la configuraci√≥n de red de LXC para asociar el bridge
vim /etc/lxc/default.conf
--------------------------------------------------------------------------------------------------------------------------
# crea una interfaz virtual tipo veth y la conecta al bridge br0
lxc.net.0.type = veth
lxc.net.0.link = br0
lxc.net.0.flags = up

# permite perfiles AppArmor y anidamiento de contenedores
lxc.apparmor.profile = generated
lxc.apparmor.allow_nesting = 1

# Usar systemd como PID 1
lxc.init.cmd = /lib/systemd/systemd

# Montar cgroups y sistemas necesarios
lxc.mount.auto = proc sys cgroup
lxc.mount.entry = /dev/fuse dev/fuse none bind,create=file 0 0
--------------------------------------------------------------------------------------------------------------------------

# reinicio el servicio de la red y reinicio
systemctl restart networking
sudo reboot now
